[
  {
    "objectID": "src/raccoon_flanders.html",
    "href": "src/raccoon_flanders.html",
    "title": "Emerging trend indicators",
    "section": "",
    "text": "This document shows how using GBIF species occurrence cubes to assess the emerging status of raccoon (Procyon lotor) in Flanders. This workflow is strongly based on the occurrence TrIAS indicators and can be extended to other (invasive alien) species.\n\n\nFirst, list and load the needed packages.\n\n\nCode\nlibrary(readr)\nlibrary(here)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(trias)"
  },
  {
    "objectID": "src/raccoon_flanders.html#introduction",
    "href": "src/raccoon_flanders.html#introduction",
    "title": "Emerging trend indicators",
    "section": "",
    "text": "This document shows how using GBIF species occurrence cubes to assess the emerging status of raccoon (Procyon lotor) in Flanders. This workflow is strongly based on the occurrence TrIAS indicators and can be extended to other (invasive alien) species.\n\n\nFirst, list and load the needed packages.\n\n\nCode\nlibrary(readr)\nlibrary(here)\nlibrary(dplyr)\nlibrary(patchwork)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(trias)"
  },
  {
    "objectID": "src/raccoon_flanders.html#scope",
    "href": "src/raccoon_flanders.html#scope",
    "title": "Emerging trend indicators",
    "section": "2 Scope",
    "text": "2 Scope\n\n2.1 Taxonomic scope\nThe species of interest is the raccoon (Procyon lotor (Linnaeus, 1758), GBIF Key: 5218786). This workflow can easily be extended to other species.\n\n\nCode\nspecies &lt;- tibble::tibble(\n  specieskey = c(5218786),\n  canonical_name = c(\"Procyon lotor\")\n)\n\n\n\n\n2.2 Spatial scope\nWe are interested over the emerging status of raccoon in Flanders and its provinces, where the province code (province_code) follows the gadm.org format:\n\n\nCode\nprovinces &lt;- tibble::tibble(\n  province = c(\"Antwerp\",\n               \"Limburg\",\n               \"East Flanders\",\n               \"Flemish Brabant\",\n               \"West Flanders\"),\n  province_code = c(\"BEL.2.1_1\",\n                    \"BEL.2.2_1\",\n                    \"BEL.2.3_1\",\n                    \"BEL.2.4_1\",\n                    \"BEL.2.5_1\")\n)\n\n\n\n\n2.3 Temporal scope\nWe request a species occurrence cube based on data from 1950."
  },
  {
    "objectID": "src/raccoon_flanders.html#species-occurrence-cube",
    "href": "src/raccoon_flanders.html#species-occurrence-cube",
    "title": "Emerging trend indicators",
    "section": "3 Species occurrence cube",
    "text": "3 Species occurrence cube\nWe triggered a GBIF occurrence cube via the Occurrence SQL Download API. The resulting cube (DOI: 10.15468/dl.k8vjjz, downloadKey: 0001753-250402121839773) can be downloaded in TSV format from GBIF. We have it saved at data/input as 0001888-250402121839773.csv:\n\n\nCode\ncube &lt;- readr::read_tsv(\n  here::here(\n    \"data\",\n    \"input\",\n    \"0001888-250402121839773.csv\"\n  )\n)\n\n\nPreview:\n\n\nCode\nhead(cube)\n\n\n\n  \n\n\n\nWe add \"Flanders\" to the list of province names and codes in order to calculate the emerging trends for both Flanders and its provinces at once:\n\n\nCode\nprovinces &lt;- provinces |&gt;\n  dplyr::add_row(province = \"Flanders\", province_code = \"BEL.2_1\")\n\n\nSo, from now on, when we refer to “province”, we also mean “Flanders”.\nWe calculate the cube for Flanders:\n\n\nCode\ncube_flanders &lt;- cube |&gt;\n  group_by(species, specieskey, year, eeacellcode) |&gt;\n  summarise(\n    level2gid = \"BEL.2_1\",\n    occurrences = sum(occurrences),\n    mincoordinateuncertaintyinmeters = min(mincoordinateuncertaintyinmeters),\n    .groups = \"drop\") %&gt;%\n  # order columns as in the original cube\n  dplyr::select(\n    dplyr::all_of(names(cube))\n  )\nhead(cube_flanders)\n\n\n\n  \n\n\n\nAnd we add it to cube:\n\n\nCode\ncube &lt;- dplyr::bind_rows(cube, cube_flanders)\n\n\nWe also add the province names to the cube. We use the level2gid column to do this. The level2gid column contains the province codes, which we can use to join with the provinces table:\n\n\nCode\ncube &lt;- cube |&gt;\n  dplyr::left_join(\n    provinces,\n    by = c(\"level2gid\" = \"province_code\")\n  ) |&gt;\n  dplyr::select(\n    species,\n    specieskey,\n    year,\n    eeacellcode,\n    level2gid,\n    province,\n    occurrences,\n    mincoordinateuncertaintyinmeters\n  )"
  },
  {
    "objectID": "src/raccoon_flanders.html#from-cubes-to-emerging-status",
    "href": "src/raccoon_flanders.html#from-cubes-to-emerging-status",
    "title": "Emerging trend indicators",
    "section": "4 From cubes to emerging status",
    "text": "4 From cubes to emerging status\nWe assess the emerging status of the species at province level and in all Flanders. We create time series up to 2024, because we do not have complete data for 2025 yet:\n\n\nCode\nlast_year &lt;- 2024\n\n\n\n4.1 Preprocess: from cube to time series\nFor each province, define cells with at least one observation:\n\n\nCode\ndf_cc &lt;-   cube |&gt;\n  dplyr::group_by(specieskey, level2gid) |&gt;\n  dplyr::distinct(eeacellcode) |&gt;\n  dplyr::ungroup()\n\n\nFor each province, identify the first year with at least one observation:\n\n\nCode\ndf_begin_year &lt;-\n  cube |&gt;\n  dplyr::group_by(specieskey, level2gid) |&gt;\n  dplyr::summarize(begin_year = min(year), .groups = \"drop\")\n\n\nFor each province, combine begin_year and unique eeacellcode as found above:\n\n\nCode\ndf_cc &lt;-   df_cc |&gt;\n  dplyr::left_join(df_begin_year, by = c(\"specieskey\", \"level2gid\")) |&gt; \n  dplyr::select(specieskey, level2gid, begin_year, eeacellcode)\n\n\nPreview:\n\n\nCode\nhead(df_cc)\n\n\n\n  \n\n\n\nFor each cell (eeacellcode), province (level2gid), we can now create a time series:\n\n\nCode\n# Define help function\nmake_time_series &lt;- function(eeacellcode, level2gid, specieskey, begin_year, last_year) {\n  tidyr::expand_grid(\n    eeacellcode = eeacellcode,\n    level2gid = level2gid,\n    specieskey = specieskey,\n    year = seq(from = begin_year, to = last_year)\n  )\n}\n\n# Create timeseries slots\ndf_ts &lt;- purrr::pmap_dfr(df_cc,\n  .f = make_time_series,\n  last_year = last_year\n)\n\n# Add occurrence data\ndf_ts &lt;-\n  df_ts |&gt;\n  dplyr::left_join(\n    cube |&gt; dplyr::select(\n      specieskey,\n      year,\n      eeacellcode,\n      level2gid,\n      province,\n      occurrences\n    ),\n    by = c(\"specieskey\", \"level2gid\", \"year\", \"eeacellcode\")\n  )\n\n# Replace NAs with 0\ndf_ts &lt;-\n  df_ts |&gt;\n  tidyr::replace_na(list(occurrences = 0))\n\n\nAdd column for presence (1) or absence (0):\n\n\nCode\ndf_ts &lt;-\n  df_ts |&gt;\n  dplyr::mutate(\n    ispresent = dplyr::if_else(occurrences &gt; 0, 1, 0)\n  )\n\n\nSave the time series at province level as an interim output, time_series.tsv in directory data/interim:\n\n\nCode\nreadr::write_tsv(\n  df_ts,\n  here::here(\"data\", \"interim\", \"time_series.tsv\"),\n  na = \"\"\n)\n\n\n\n\n4.2 Apply GAM\nWe are now ready to apply a Generalized Additive Model (GAM) to assess the emerging status of raccoon. Let’s compact the time series:\n\n\nCode\ncompact_df_ts &lt;- df_ts |&gt;\n    dplyr::group_by(specieskey, level2gid, province, year) |&gt;\n    dplyr::summarise(\n      occs = sum(occurrences),\n      ncells = sum(ispresent),\n      .groups = \"drop\")\n\n\nAll plots will be saved in subdirectories of ./data/output/GAM_outputs:\n\n\nCode\ndir_name_basic &lt;- here::here(\"data\", \"output\", \"GAM_outputs\")\n\n\nWe also define the plot dimensions in pixels:\n\n\nCode\nplot_dimensions &lt;- list(width = 2800, height = 1500)\n\n\nWe apply GAM for each province for the number of occurrences:\n\n\nCode\ngam_occs &lt;- purrr::map(\n  provinces$province,\n  function(pr) {\n    gam_occs_per_province &lt;- purrr::map2(\n      species$specieskey, species$canonical_name,\n      function(t, n) {\n        df_key &lt;- compact_df_ts |&gt;\n          dplyr::filter(specieskey == t, province == pr)\n        eval_year &lt;- df_key$year[nrow(df_key)]\n        trias::apply_gam(\n          df = df_key,\n          y_var = \"occs\",\n          taxonKey = \"specieskey\",\n          eval_years = eval_year,\n          type_indicator = \"observations\",\n          taxon_key = t,\n          name = n,\n          df_title = pr,\n          dir_name = paste0(dir_name_basic, \"/long_titles\"),\n          y_label = \"number of observations\",\n          saveplot = TRUE,\n          width = plot_dimensions$width,\n          height = plot_dimensions$height\n        )\n      })\n    names(gam_occs_per_province) &lt;- species$canonical_name\n    gam_occs_per_province\n  }\n)\nnames(gam_occs) &lt;- provinces$province\n\n\nAnd the number of occupied cells, or measured occupancy:\n\n\nCode\ngam_ncells &lt;- purrr::map(\n  provinces$province,\n  function(pr) {\n    gam_ncells_per_province &lt;- purrr::map2(\n      species$specieskey, species$canonical_name,\n      function(t, n) {\n        df_key &lt;- compact_df_ts |&gt;\n          dplyr::filter(specieskey == t, province == pr)\n        eval_year &lt;- df_key$year[nrow(df_key)]\n        trias::apply_gam(\n          df = df_key,\n          y_var = \"ncells\",\n          taxonKey = \"specieskey\",\n          eval_years = eval_year,\n          type_indicator = \"occupancy\",\n          taxon_key = t,\n          name = n,\n          df_title = pr,\n          dir_name = paste0(dir_name_basic, \"/long_titles\"),\n          y_label = \"number of occupied cells (1km x 1km)\",\n          saveplot = TRUE,\n          width = plot_dimensions$width,\n          height = plot_dimensions$height\n        )\n      })\n    names(gam_ncells_per_province) &lt;- species$canonical_name\n    gam_ncells_per_province\n  }\n)\nnames(gam_ncells) &lt;- provinces$province"
  },
  {
    "objectID": "src/raccoon_flanders.html#plots",
    "href": "src/raccoon_flanders.html#plots",
    "title": "Emerging trend indicators",
    "section": "5 Plots",
    "text": "5 Plots\nPlease go to ./data/output/GAM_outputs to download the plots shown in this section.\n\n5.1 Standard plots\nIn this section we show the plots as returned by apply_gam(). Plot titles could be quite long. Folder: ./data/output/GAM_outputs/long_titles.\n\n5.1.1 Occurrences\n\n\nCode\npurrr::walk(gam_occs, function(province) {\n  purrr::walk(province, function(x) print(x$plot))\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.1.2 Measured occupancy\n\n\nCode\npurrr::walk(gam_ncells, function(pr) {\n  purrr::walk(pr, function(x) print(x$plot))\n  }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2 Short titles\nWe show and save plots with the species only as title. We save them in sub folder ./data/output/GAM_outputs/short_title.\n\n5.2.1 Occurrences\n\n\nCode\npurrr::iwalk(gam_occs, function(x, pr) {\n  purrr::iwalk(x, function(y, sp) {\n    y$plot &lt;- y$plot + ggplot2::ggtitle(label = paste(sp, \"-\", pr))\n    ggplot2::ggsave(\n      filename = here::here(\n        \"data\",\n        \"output\",\n        \"GAM_outputs\",\n        \"short_title\",\n        paste0(\"occurrences_\", sp, \"_\", pr, \".png\")),\n      plot = y$plot,\n      width = plot_dimensions$width,\n      height = plot_dimensions$height,\n      units = \"px\"\n    )\n    print(y$plot)\n  })\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2.2 Occupancy\nWe do the same for the measured occupancy (number of occupied grid cells).\n\n\nCode\npurrr::iwalk(gam_ncells, function(x, pr) {\n  purrr::iwalk(x, function(y, sp) {\n    y$plot &lt;- y$plot + ggplot2::ggtitle(label = paste(sp, \"-\", pr))\n    ggplot2::ggsave(\n      filename = here::here(\n        \"data\",\n        \"output\",\n        \"GAM_outputs\",\n        \"short_title\",\n        paste0(\"occupancy_\", sp, \"_\", pr, \".png\")),\n      plot = y$plot,\n      width = plot_dimensions$width,\n      height = plot_dimensions$height,\n      units = \"px\"\n    )\n    print(y$plot)\n  })\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3 Grid\nFor each province, we can show the plots of the number of occurrences and the measured occupancy next to each other. Plots are saved in subfolder ./data/output/GAM_outputs/plots_for_countries.\n\n\nCode\n# Transform gam_occs and gam_ncells into a list of lists \ngam_provinces &lt;- purrr::map(\n  provinces$province,\n  function(pr) {\n    purrr::map2(\n      gam_occs[[pr]],\n      gam_ncells[[pr]],\n      function(x, y) list(occurrences = x, ncells = y)\n    )\n  }\n)\nnames(gam_provinces) &lt;- provinces$province\n# Create a grid of plots for each province\npurrr::walk2(\n  gam_provinces,\n  provinces$province,\n  function(gam, pr) {\n    purrr::walk(gam, function(x) {\n      # Remove title\n      x$occurrences$plot &lt;- x$occurrences$plot + ggplot2::ggtitle(NULL)\n      x$ncells$plot &lt;- x$ncells$plot + ggplot2::ggtitle(NULL)\n      p &lt;- patchwork::wrap_plots(x$occurrences$plot,\n                                 x$ncells$plot,\n                                 nrow = 1,\n                                 ncol = 2) +\n        # Unify legends\n        patchwork::plot_layout(guides = 'collect') + \n        # Add general title\n        patchwork::plot_annotation(\n          title = pr\n        )\n      ggplot2::ggsave(\n        filename = here::here(\n          \"data\",\n          \"output\",\n          \"GAM_outputs\",\n          \"plots_for_provinces\",\n          paste0(pr, \"_grid.png\")),\n        plot = p,\n        width = plot_dimensions$width,\n        height = plot_dimensions$height,\n        units = \"px\"\n      )\n      print(p)\n    })\n  }\n)"
  }
]